<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<?xml-stylesheet href="./_c74_ref.xsl" type="text/xsl"?>

<!--MEMO-->
<!-- <m> initwith </m> : references a message -->
<!-- <o> loadbang </o> : references an object -->
<!-- <i> mvc.overview.maxpat </i> : references a patcher -->
<!-- <at>default</at> : references an attribute -->
<!-- <link type="vignette" module="aim" name="brace_expansion">brace expansion notation</link> : add a link to a vignette -->
<!-- <img src="images/image137.png" /> : put an image -->

<c74object name="mvc.parameter" module="aim" kind="patcher" category="library">

	<digest>
		Declare a parameter and its attributes
	</digest>

	<description>
		<o>mvc.parameter</o> declares a parameter (or series of -) in the <link type="vignette" module="aim" name="MVC_namespace">MVC namespace</link>. It is somehow similar to the pattr object, while enabling a number of additional features offered by the aim environment.
	</description>
	<discussion>
    	An <o>mvc.parameter</o> object enable to define parameters in a model (defined by an <o>mvc.model</o> or simply an <o>mvc.device</o>) to which we'll be able to send data and consequently tweak a process. We can also fetch its value, e.g. to display it in a GUI. Last, <o>mvc.parameter</o>s can be saved in presets by the <o>mvc.model</o>) to which they are bound to.<br />

		<o>mvc.parameter</o> helps defining a model in the <link type="vignette" module="aim" name="MVC_principles">MVC model</link> used in the MVC package.
  </discussion>
	
	<!--METADATA-->
	<metadatalist>
		<metadata name="author">Vincent Goudard</metadata>
		<metadata name="tag">MVC</metadata>
		<metadata name="tag">mapping</metadata>
		<metadata name="aim-type">core</metadata>
	</metadatalist>

	
	<!--INLETS-->
	<inletlist>
		<inlet id="0" name="Value input" type="any">
			<digest>Value to set the parameter to.</digest>
			<description>Value to set the parameter to.</description>
		</inlet>
		<inlet id="1" name="control messages" type="any">
			<digest>control the mvc.remote object.</digest>
		</inlet>
	</inletlist>


	<!--OUTLETS-->
	<outletlist>
		<outlet id="0" name="value output" type="any">
			<digest>Value the parameter was set to.</digest>
			<description>Value the parameter was set to.</description>
		</outlet>
		<outlet id="1" name="address outlet" type="any">
			<digest>output the address and index</digest>
			<description>Since <o>mvc.parameter</o> can declare multiple addresses thanks to the braces notation, this outlet provide the specific address for which we are receiving a value on the first outlet, and its index in the mvc.parameter namespace.</description>
		</outlet>
		<outlet id="2" name="dump outlet" type="any">
			<digest>Various information messages</digest>
			<description>Messages and information in reply to various messages</description>
		</outlet>
	</outletlist>
	
	<!--ARGUMENTS-->
	<objarglist>
		<objarg name="parent" optional="0" type="symbol">
			<digest>
				Parent node's UID to which this <o>mvc.parameter</o> is attached.
			</digest>
			<description>
				The parent node can either be :
				<ul>
					<li>an <b><o>mvc.device</o></b> : in this case, one should provide the device name (which is its own UID).</li>
					<li>an <b><o>mvc.model</o></b> : in this case, one should provide the model's UID (see <o>mvc.model</o> reference).</li>
				</ul>
			</description>
		</objarg>
		<objarg name="name" optional="0" type="symbol">
			<digest>
				The parameter name.
			</digest>
			<description>
				The parameter name should be a symbol (that is, it can contain spaces, as long as it is surrounded by quotes). It can make use of the <link type="vignette" module="aim" name="brace_expansion">brace expansion notation</link>. Note that the use of slashes (like "cutoff/frequency") in the name is prohibited.
			</description>
		</objarg>

	</objarglist>

	<!--METHODS-->	
	<methodlist>

		<method name="anything (on the left inlet)">
			<arglist>
				<arg name="values" optional="0" type="list"/>
			</arglist>
			<digest>
				Feed values to <o>mvc.parameter</o>.
			</digest>
			<description>
				The values will be sent to all addresses covered by the <o>mvc.parameter</o> namespace.
			</description>
		</method>

		<method name="setvalue (on the left inlet)">
			<arglist>
				<arg name="index" optional="0" type="int"/>
				<arg name="values" optional="0" type="list"/>
			</arglist>
			<digest>
				Set the value of a specific address in the <o>mvc.parameter</o> namespace.
			</digest>
			<description>
				The values will be sent to the addresses of the <o>mvc.parameter</o> at the specified index (following the setvalue method in MC components).
			</description>
		</method>

		<method name="name (on the right inlet)">
			<arglist>
				<arg name="parameter name" type="symbol" optional="0"/>
			</arglist>
			<digest>
				Set the parameter name.
			</digest>
			<description>
				Multiple parameter addresses can be set with the <link type="vignette" module="aim" name="brace_expansion">brace expansion notation</link>.
			</description>
		</method> 

		<method name="parent (on the right inlet)">
			<arglist>
				<arg name="parent UID" type="symbol" optional="0"/>
			</arglist>
			<digest>
				Set the parent node's UID to which this <o>mvc.parameter</o> is attached.
			</digest>
			<description>
				The parent node can either be :
				<ul>
					<li>an <b><o>mvc.device</o></b> : in this case, one should provide the device name (which is its own UID).</li>
					<li>an <b><o>mvc.model</o></b> : in this case, one should provide the model's UID (see <o>mvc.model</o> reference).</li>
				</ul>
			</description>
		</method> 

		<method name="get (on the right inlet)">
			<arglist>
				<arg name="arguments" type="list" optional="1"/>
			</arglist>
			<digest>
				Retrieve the <o>mvc.parameter</o> values or attributes.
			</digest>
			<description>
				Possible arguments to the <m>get</m> message are :
				<ul>
					<li><m>get parent</m> : output the parent model UID on the right-most outlet (compact/braced form).</li>
					<li><m>get name</m> : output the parameter's name on the right-most outlet (compact/braced form).</li>
					<li><m>get uid</m> : output the parameter's UID (integer) on the right-most outlet.</li>
					<li><m>get values</m> : output the values (on first outlet) and addresses/index (on second outlet) for all addresses of this parameter. If it is followed by an index, only this index will be output.</li>
					<li><m>get addresslist</m> : output the list of addresses on the right-most outlet in the format "addresslist [index] [address]".</li>
					<li><m>get addresscount</m> : output the number of addresses in the namespace of this parameter.</li>
					<li><m>get attributes</m> : dumpout all attributes on the right-most outlet.</li>
					<li><m>get [attribute]</m> : you can also retrive a specific attribute by specifying its name. For instance the meesage <m>get unit</m> will output the <at>unit</at> attribute, if any, on the right most outlet.</li>
				</ul>
			</description>
		</method>

		<method name="reset (on the right inlet)">
			<digest>
				Reset to default value
			</digest>
			<description>
				The message <m>reset</m> sent to the leftmost inlet reset the current value to the value defined by the <at>default</at> attribute
			</description>
		</method>
 
 		<method name="default">
			<arglist>
				<arg name="default value" type="anything" optional="1"/>
			</arglist>
			<digest>
				Sets the parameter's default value (see attributes section for details). An empty value remove the attribute.
			</digest>
		</method>
		 
		<method name="min">
			<arglist>
				<arg name="min value" type="number" optional="1"/>
			</arglist>
			<digest>
				Sets the parameter's range minimum (see attributes section for details). An empty value remove the attribute.
			</digest>
		</method>

 		<method name="max">
			<arglist>
				<arg name="max value" type="number" optional="1"/>
			</arglist>
			<digest>
				Sets the parameter's range maximum (see attributes section for details). An empty value remove the attribute.
			</digest>
		</method>

		<method name="range">
			<arglist>
				<arg name="min value" type="number" optional="1"/>
				<arg name="max value" type="number" optional="1"/>
			</arglist>
			<digest>
				Sets the parameter's range (see attributes section for details). An empty value remove the attribute.
			</digest>
		</method>

		<method name="type">
			<arglist>
				<arg name="type value" type="symbol" optional="1"/>
			</arglist>
			<digest>
				Sets the parameter's type (see attributes section for details). An empty value remove the attribute.
			</digest>
		</method>

		<method name="description">
			<arglist>
				<arg name="description value" type="symbol" optional="1"/>
			</arglist>
			<digest>
				Sets the parameter's description (see attributes section for details). An empty value remove the attribute.
			</digest>
		</method>

		<method name="clip">
			<arglist>
				<arg name="clipping mode value" type="symbol" optional="1"/>
			</arglist>
			<digest>
				Sets the parameter's clipping mode (see attributes section for details). An empty value remove the attribute.
			</digest>
		</method>

		<method name="options">
			<arglist>
				<arg name="list of options" type="list" optional="1"/>
			</arglist>
			<digest>
				Sets the parameter's options (see attributes section for details). An empty value remove the attribute.
			</digest>
		</method>

		<method name="unit">
			<arglist>
				<arg name="unit value" type="symbol" optional="1"/>
			</arglist>
			<digest>
				Sets the parameter's unit (see attributes section for details). An empty value remove the attribute.
			</digest>
		</method>

	</methodlist>


	<!--ATTRIBUTES-->
	<attributelist>
		<attribute name="default" get="1" set="1" type="anything" size="1">
			<digest>
				Default value.
			</digest>
			<description>
				The <at>default</at> attribute sets the value to output at the leftmost outlet on model initialization. The default value can be overridden by the default model preset
			</description>
		</attribute>	

		<attribute name="description" get="1" set="1" type="symbol" size="1">
			<digest>
				Description of this parameter.
			</digest>
			<description>
				The <at>description</at> attribute allows to agive a textual description for this node. This helps documenting the parameter and can be retrieved by GUI elements (e.g. <o>mvc.GUI.number</o>).
			</description>
		</attribute>

		<attribute name="type" get="1" set="1" type="symbol" size="1">
			<digest>
				Value type (integer, decimal, string, bool, list)
			</digest>
			<description>
				The <at>type</at> attribute defines the type of the value. Possible types are:
				<ul>
					<li><m>decimal</m> (default): a floating point value.</li>
					<li><m>integer</m> : an integer value.</li>
					<li><m>string</m> : a string value (aka "symbol" in Max).</li>
					<li><m>bool</m> : boolean value. Implicitely clips value to 0/1</li>
					<li><m>list</m> : a list of elements including numbers and symbols</li>
					<li><m>dict</m> : a dictionary</li>
				</ul>
			</description>
		</attribute>
		 
		<attribute name="min" get="1" set="1" type="float" size="1">
			<digest>
				Value range minimum
			</digest>
			<description>
				The <at>min</at> attribute defines the minimum value of expected range of possible values. Depending on the <at>clip</at> attribute, this might be a recommended or mandatory range.
			</description>
		</attribute>

		<attribute name="max" get="1" set="1" type="float" size="1">
			<digest>
				Value range maximum
			</digest>
			<description>
				The <at>max</at> attribute defines the maximum value of expected range of possible values. Depending on the <at>clip</at> attribute, this might be a recommended or mandatory range.
			</description>
		</attribute>	

		<attribute name="range" get="1" set="1" type="number" size="2">
			<digest>
				Value range
			</digest>
			<description>
				The <at>range</at> attribute defines the expected range of possible values. Depending on the <at>clip</at> attribute, this might be a recommended or mandatory range.
			</description>
		</attribute>	

		<attribute name="clip" get="1" set="1" type="symbol" size="1">
			<digest>
				Set how values exceeding range will be clipped
			</digest>
			<description>
				The <at>clip</at> attribute defines how values exceeding the range will be managed. Available clipmodes are:
				<ul>
					<li><m>free</m>: when set to <m>free</m> (default), exceeding values will be left untouched</li>
					<li><m>low</m>: when set to <m>low</m>, values exceeding the lower bound will be clipped. Values exceeding the upper bound will be left untouched</li>
					<li><m>high</m>: when set to <m>high</m>, values exceeding the upper bound will be clipped. Values exceeding the lower bound will be left untouched</li>
					<li><m>both</m>: when set to <m>both</m>, values exceeding lower or upper bounds will be clipped</li>
				</ul>
			</description>
		</attribute>

		<attribute name="unit" get="1" set="1" type="symbol" size="1">
			<digest>
				Unit used by the parameter
			</digest>
			<description>
				The <at>unit</at> attribute defines the unit used by this parameter. It can be retrieved and displayed by GUI (and could possibly allow for dynamic unit conversion in the future).
			</description>
		</attribute>		

		<attribute name="options" get="1" set="1" type="symbol" size="1">
			<digest>
				Defines a list of possibles values for this parameter.
			</digest>
			<description>
				The <at>options</at> attribute defines which values this parameter can take. It can be retrieved and displayed by GUI (for instance to feed a menu for the user to choose among those possible options). If a clipping mode is defined (and a range in the case of numbers), these options will constrain the output value of the parameter.
			</description>
		</attribute>
	</attributelist>

	<!--SEEALSO-->
	<seealsolist>
		<seealso name="mvc.model"/>
		<seealso name="mvc.device"/>
		<seealso name="mvc.remote"/>
		<seealso name="mvc.state"/>
		<seealso name="mvc.message"/>
	</seealsolist>
	
</c74object>
